// <auto-generated />
using System;
using FormiWebshop.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FormiWebshop.Server.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FormiWebshop.Shared.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("FormiWebshop.Shared.CartItem", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProductId", "ProductTypeId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("FormiWebshop.Shared.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Name = "Pictures",
                            Url = "pictures",
                            Visible = true
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            Name = "Modeling clay",
                            Url = "modeling-clay",
                            Visible = true
                        });
                });

            modelBuilder.Entity("FormiWebshop.Shared.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("FormiWebshop.Shared.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FormiWebshop.Shared.OrderItem", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId", "ProductId", "ProductTypeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("FormiWebshop.Shared.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Featured")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Deleted = false,
                            Description = "A \"Mária a kisdeddel\" kép egy hagyományos keresztény ábrázolás, mely Máriát, Jézus Krisztus anyját mutatja, ahogy gyermekét, a kisded Jézust tartja. Ez a téma rendkívül népszerű a keresztény művészetben, különösen a középkorban és a reneszánsz korban.",
                            Featured = true,
                            ImageUrl = "https://scontent.fosl3-1.fna.fbcdn.net/v/t1.18169-9/1926658_523142377794916_1845919539_n.jpg?_nc_cat=107&ccb=1-7&_nc_sid=4dc865&_nc_ohc=MhX_FG2GyskAX-XuLIN&_nc_ht=scontent.fosl3-1.fna&oh=00_AfDnqRsn_zr273ywekZ7VCxSCnilnHClcM9R5eFAEXUopQ&oe=65DBB0DD",
                            Title = "Mária a kisdeddel",
                            Visible = true
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Deleted = false,
                            Description = "Az \"Életfa\" című kép egy mélyen szimbolikus alkotás, amely az élet, a növekedés, és a természet örök ciklusát ábrázolja. Gyakran előfordul különböző kultúrák mítoszaiban és hiedelmeiben, az életfa a kapcsolatot szimbolizálja az ég és a föld között, gyökereivel a földbe mélyedve és ágaival az ég felé törve.",
                            Featured = false,
                            ImageUrl = "https://scontent.fosl3-1.fna.fbcdn.net/v/t31.18172-8/1965663_523143624461458_1276340583_o.jpg?_nc_cat=105&ccb=1-7&_nc_sid=4dc865&_nc_ohc=DyWTtiRlcl0AX8Nxzcu&_nc_ht=scontent.fosl3-1.fna&oh=00_AfAm6Aet5DjhthAUqdBv0qcNv5L8exN-bV7KvM1xuAVUQw&oe=65DB92E9",
                            Title = "Életfa",
                            Visible = true
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Deleted = false,
                            Description = "A \"Szerencse lovai\" című kép egy dinamikus és élettel teli alkotás, amely a mozgás, erő és szerencse témáit ötvözi. A kompozíció középpontjában álló lovak, amelyeket gyakran vad, szabad szellemű lényekként ábrázolnak, ezen a képen a szerencse és a sors fordulatos útjait szimbolizálják.",
                            Featured = false,
                            ImageUrl = "https://scontent.fosl3-2.fna.fbcdn.net/v/t1.18169-9/1926668_523142884461532_1016400965_n.jpg?_nc_cat=103&ccb=1-7&_nc_sid=4dc865&_nc_ohc=fqFgPIYsG6UAX8qPKJa&_nc_ht=scontent.fosl3-2.fna&oh=00_AfBQwQA9PvCzcpgn3LBeOlzq59Yd4SwUgqUKSa5-BIeZCw&oe=65DB86F7",
                            Title = "A szerencse lovai",
                            Visible = true
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Deleted = false,
                            Description = "A \"Harcsa\" című kép egy lenyűgöző vizuális alkotás, amely a víz alatti világ egyik legérdekesebb és legmisztikusabb lakóját, a harcsát állítja középpontba. A harcsa, mint téma, ritkábban fordul elő a művészetben, ami különlegessé és figyelemfelkeltővé teszi ezt a művet. A képen a harcsa általában hatalmas, izmos testével és jellegzetes, bajuszszerű úszóival tűnik ki, amelyek azonnal felismerhetővé teszik ezt a vízi ragadozót.",
                            Featured = false,
                            ImageUrl = "https://scontent.fosl3-2.fna.fbcdn.net/v/t1.18169-9/1948202_523141641128323_1230882181_n.jpg?_nc_cat=111&ccb=1-7&_nc_sid=4dc865&_nc_ohc=ikaauvVmcSsAX_ZBz-n&_nc_ht=scontent.fosl3-2.fna&oh=00_AfC3dputgHv8qhnf9h5kpRvaiPTLhUzbekoU3vpFIa_FVQ&oe=65DB7D68",
                            Title = "Harcsa",
                            Visible = true
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Deleted = false,
                            Description = "A \"Margaréta\" című kép egy bájos és finom alkotás, amely a természet egyik legkedveltebb virágát, a margarétát ünnepli. A margaréta a tisztaság, ártatlanság és valódi szeretet szimbóluma. A képen ábrázolt virágok frissessége és egyszerű szépsége közvetlenül szólítja meg a nézőt, miközben a művész által választott kompozíció és színpaletta a természetes szépség és a harmónia érzetét kelti.",
                            Featured = false,
                            ImageUrl = "https://scontent.fosl3-1.fna.fbcdn.net/v/t1.18169-9/1006045_523139247795229_57350582_n.jpg?_nc_cat=102&ccb=1-7&_nc_sid=4dc865&_nc_ohc=Ihbt_rqgbBUAX81bdPb&_nc_ht=scontent.fosl3-1.fna&oh=00_AfDjDqQpqQmHbrDZnaJjCVgfmi8drN6ufEv2EAzFgCI-cg&oe=65DB8E34",
                            Title = "Margaréta",
                            Visible = true
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Deleted = false,
                            Description = "Ez a szett egy dinamikus és élénk színkombinációt tartalmaz, beleértve a fehér, sárga, piros, kék és zöld árnyalatokat. A színek sokoldalúsága lehetővé teszi a felhasználók számára, hogy szabadon kísérletezzenek és színes alkotásokat hozzanak létre, legyen szó akár tájképekről, állatfigurákról vagy akár absztrakt művekről.",
                            Featured = false,
                            ImageUrl = "https://scontent.fosl3-1.fna.fbcdn.net/v/t31.18172-8/1966061_523163521126135_466461706_o.jpg?_nc_cat=105&ccb=1-7&_nc_sid=4dc865&_nc_ohc=xRoHug-HKyoAX-cRmGw&_nc_ht=scontent.fosl3-1.fna&oh=00_AfAen_VwD2tSXRd7v0hQgWpSKt30Tt30b4Ngl8hss1KUWg&oe=65ECD67C",
                            Title = "Dobozos gyurma 1. szín",
                            Visible = true
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Deleted = false,
                            Description = "Ebben a szettben a fehér mellett a test szín, lila, barna és fekete árnyalatok dominálnak, amelyek tökéletesen alkalmasak emberi alakok és természeti elemek modellezésére. Ez a paletta különösen jól használható a realisztikusabb, részletgazdag alkotásokhoz, amelyek finom árnyalatokkal és átmenetekkel dolgoznak.",
                            Featured = false,
                            ImageUrl = "https://scontent.fosl3-1.fna.fbcdn.net/v/t31.18172-8/10001106_523163627792791_943319837_o.jpg?_nc_cat=105&ccb=1-7&_nc_sid=4dc865&_nc_ohc=GTfbWV9OrQUAX_csRP3&_nc_ht=scontent.fosl3-1.fna&oh=00_AfAWSDH-exYdoY24LBJ3A6vWwz2KGqzf9vVsIuHQS3MG4Q&oe=65DBADF1",
                            Title = "Dobozos gyurma 2. szín",
                            Visible = true
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Deleted = false,
                            Description = "Fehér, narancs, türkiz, ciklámen és szürke színeket tartalmaz, amelyek egyedi és modern alkotások létrehozására inspirálnak. A friss és élénk színek, mint a türkiz és a ciklámen, mellett a narancs és a szürke árnyalatok kiegyensúlyozott kontrasztot nyújtanak, lehetővé téve a felhasználók számára, hogy élénk és figyelemfelkeltő műveket hozzanak létre.",
                            Featured = false,
                            ImageUrl = "https://scontent.fosl3-1.fna.fbcdn.net/v/t31.18172-8/1529758_523163694459451_1282257657_o.jpg?_nc_cat=108&ccb=1-7&_nc_sid=4dc865&_nc_ohc=3c8hUGXM3cIAX-Hkmim&_nc_ht=scontent.fosl3-1.fna&oh=00_AfD4xQGGIH_oot7sTWpnjFPMphVBJtjvGo9aM-XLzki5vQ&oe=65DB93A0",
                            Title = "Dobozos gyurma 3. szín",
                            Visible = true
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            Deleted = false,
                            Description = "Ez a készlet finomabb, pasztellszínű választékot kínál, beleértve a fehér, világos zöld, meggy piros, világos rózsaszín és világos kék árnyalatokat. A lágy és nyugtató színek ideálisak a békés és harmonikus jelenetek megalkotásához, kiválóan alkalmasak a gyengédebb érzelmek és hangulatok kifejezésére.",
                            Featured = false,
                            ImageUrl = "https://scontent.fosl3-1.fna.fbcdn.net/v/t31.18172-8/1597214_523163817792772_1796134464_o.jpg?_nc_cat=105&ccb=1-7&_nc_sid=4dc865&_nc_ohc=mBeu6SLPaloAX_P1Rwx&_nc_oc=AQmdzVaxVEDd6RtMoPtledUgkJ9bGN8v5hRnzcKoGmeUvHmdzfd-It84XqVq2MBnmW0&_nc_ht=scontent.fosl3-1.fna&oh=00_AfAf2KVOdX1aBNlGjtaftkrI4yjQJ4fi_YhcEIBvzzYDFg&oe=65DBB01A",
                            Title = "Dobozos gyurma 4. szín",
                            Visible = true
                        });
                });

            modelBuilder.Entity("FormiWebshop.Shared.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "9 x 13 cm"
                        },
                        new
                        {
                            Id = 2,
                            Name = "10 x 15 cm"
                        },
                        new
                        {
                            Id = 3,
                            Name = "30 x 40 cm"
                        },
                        new
                        {
                            Id = 4,
                            Name = "5 x 10 dkg"
                        },
                        new
                        {
                            Id = 5,
                            Name = "5 x 5 dkg"
                        });
                });

            modelBuilder.Entity("FormiWebshop.Shared.ProductVariant", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("ProductId", "ProductTypeId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("ProductVariants");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ProductTypeId = 1,
                            Deleted = false,
                            OriginalPrice = 1200.00m,
                            Price = 900.00m,
                            Visible = true
                        },
                        new
                        {
                            ProductId = 1,
                            ProductTypeId = 2,
                            Deleted = false,
                            OriginalPrice = 2500.00m,
                            Price = 2000.00m,
                            Visible = true
                        },
                        new
                        {
                            ProductId = 1,
                            ProductTypeId = 3,
                            Deleted = false,
                            OriginalPrice = 7500.00m,
                            Price = 6000.00m,
                            Visible = true
                        },
                        new
                        {
                            ProductId = 2,
                            ProductTypeId = 1,
                            Deleted = false,
                            OriginalPrice = 1200.00m,
                            Price = 900.00m,
                            Visible = true
                        },
                        new
                        {
                            ProductId = 2,
                            ProductTypeId = 2,
                            Deleted = false,
                            OriginalPrice = 2500.00m,
                            Price = 2000.00m,
                            Visible = true
                        },
                        new
                        {
                            ProductId = 2,
                            ProductTypeId = 3,
                            Deleted = false,
                            OriginalPrice = 7500.00m,
                            Price = 6000.00m,
                            Visible = true
                        },
                        new
                        {
                            ProductId = 3,
                            ProductTypeId = 1,
                            Deleted = false,
                            OriginalPrice = 1200.00m,
                            Price = 900.00m,
                            Visible = true
                        },
                        new
                        {
                            ProductId = 3,
                            ProductTypeId = 2,
                            Deleted = false,
                            OriginalPrice = 2500.00m,
                            Price = 2000.00m,
                            Visible = true
                        },
                        new
                        {
                            ProductId = 3,
                            ProductTypeId = 3,
                            Deleted = false,
                            OriginalPrice = 7500.00m,
                            Price = 6000.00m,
                            Visible = true
                        },
                        new
                        {
                            ProductId = 4,
                            ProductTypeId = 1,
                            Deleted = false,
                            OriginalPrice = 1200.00m,
                            Price = 900.00m,
                            Visible = true
                        },
                        new
                        {
                            ProductId = 4,
                            ProductTypeId = 2,
                            Deleted = false,
                            OriginalPrice = 2500.00m,
                            Price = 2000.00m,
                            Visible = true
                        },
                        new
                        {
                            ProductId = 4,
                            ProductTypeId = 3,
                            Deleted = false,
                            OriginalPrice = 7500.00m,
                            Price = 6000.00m,
                            Visible = true
                        },
                        new
                        {
                            ProductId = 5,
                            ProductTypeId = 1,
                            Deleted = false,
                            OriginalPrice = 1200.00m,
                            Price = 900.00m,
                            Visible = true
                        },
                        new
                        {
                            ProductId = 5,
                            ProductTypeId = 2,
                            Deleted = false,
                            OriginalPrice = 2500.00m,
                            Price = 2000.00m,
                            Visible = true
                        },
                        new
                        {
                            ProductId = 5,
                            ProductTypeId = 3,
                            Deleted = false,
                            OriginalPrice = 7500.00m,
                            Price = 6000.00m,
                            Visible = true
                        },
                        new
                        {
                            ProductId = 6,
                            ProductTypeId = 4,
                            Deleted = false,
                            OriginalPrice = 1200.00m,
                            Price = 1000.00m,
                            Visible = true
                        },
                        new
                        {
                            ProductId = 6,
                            ProductTypeId = 5,
                            Deleted = false,
                            OriginalPrice = 1000.00m,
                            Price = 900.00m,
                            Visible = true
                        },
                        new
                        {
                            ProductId = 7,
                            ProductTypeId = 4,
                            Deleted = false,
                            OriginalPrice = 1200.00m,
                            Price = 1000.00m,
                            Visible = true
                        },
                        new
                        {
                            ProductId = 7,
                            ProductTypeId = 5,
                            Deleted = false,
                            OriginalPrice = 1000.00m,
                            Price = 900.00m,
                            Visible = true
                        },
                        new
                        {
                            ProductId = 8,
                            ProductTypeId = 4,
                            Deleted = false,
                            OriginalPrice = 1200.00m,
                            Price = 1000.00m,
                            Visible = true
                        },
                        new
                        {
                            ProductId = 8,
                            ProductTypeId = 5,
                            Deleted = false,
                            OriginalPrice = 1000.00m,
                            Price = 900.00m,
                            Visible = true
                        },
                        new
                        {
                            ProductId = 9,
                            ProductTypeId = 4,
                            Deleted = false,
                            OriginalPrice = 1200.00m,
                            Price = 1000.00m,
                            Visible = true
                        },
                        new
                        {
                            ProductId = 9,
                            ProductTypeId = 5,
                            Deleted = false,
                            OriginalPrice = 1000.00m,
                            Price = 900.00m,
                            Visible = true
                        });
                });

            modelBuilder.Entity("FormiWebshop.Shared.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FormiWebshop.Shared.Address", b =>
                {
                    b.HasOne("FormiWebshop.Shared.User", null)
                        .WithOne("Address")
                        .HasForeignKey("FormiWebshop.Shared.Address", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FormiWebshop.Shared.Image", b =>
                {
                    b.HasOne("FormiWebshop.Shared.Product", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("FormiWebshop.Shared.OrderItem", b =>
                {
                    b.HasOne("FormiWebshop.Shared.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormiWebshop.Shared.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormiWebshop.Shared.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("FormiWebshop.Shared.Product", b =>
                {
                    b.HasOne("FormiWebshop.Shared.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FormiWebshop.Shared.ProductVariant", b =>
                {
                    b.HasOne("FormiWebshop.Shared.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormiWebshop.Shared.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("FormiWebshop.Shared.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FormiWebshop.Shared.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("FormiWebshop.Shared.User", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
