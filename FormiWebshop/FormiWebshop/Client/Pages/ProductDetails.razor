@page "/product/{id:int}"
@using System.Runtime.CompilerServices
@inject IProductService ProductService
@inject ICartService CartService
@inject IStringLocalizer<App> Localizer

@if (product == null)
{
    <span>@message</span>
}
else
{

    <MudGrid Spacing="@spacing" Justify="Justify.Center">
        <MudItem xs="6">
            @if (!string.IsNullOrEmpty(product.ImageUrl))
            {
                <MudImage Class="d-flex align-center justify-center mud-width-full py-8" src="@product.ImageUrl" alt="@product.Title" />
            }
            else
            {
                <MudCarousel Class="d-flex align-center justify-center mud-width-full py-8" ItemsSource="product.Images" Style="height: 200px;" AutoCycle="@autocycle">
                    <ItemTemplate>
                        <MudImage Src="@context.Data"></MudImage>
                    </ItemTemplate>
                </MudCarousel>
            }
        </MudItem>
        <MudItem xs="6">
            <h2 class="mb-0">@product.Title</h2>
            <p>@product.Description</p>
            @if (product.Variants != null && product.Variants.Count > 1)
            {
                <div class="mb-3">
                    <select class="form-select" @bind="currentTypeId">
                        @foreach (var variant in product.Variants)
                        {
                            <option value="@variant.ProductTypeId">@variant.ProductType.Name</option>
                        }
                    </select>
                </div>
            }
            @if (GetSelectedVariant() != null)
            {
                @if (GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
                {
                    <h6 class="text-muted original-price">
                        @GetSelectedVariant().OriginalPrice @Localizer[nameof(ResourceStrings.Currency)]
                    </h6>
                }
                <h4 class="price">
                    @GetSelectedVariant().Price @Localizer[nameof(ResourceStrings.Currency)]
                </h4>
            }
            <MudButton Color="Color.Primary" OnClick="AddToCart">
                <MudIcon Icon="@Icons.Material.Filled.AddShoppingCart" Title="AddShoppingCart" />@Localizer[nameof(ResourceStrings.AddToCart)]
            </MudButton>
        </MudItem>
    </MudGrid>
}

@code {
    private Product? product;
    private string message = string.Empty;
    private int currentTypeId = 1;
    private bool autocycle = false;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        message = "Loading product...";

        var result = await ProductService.GetProduct(Id);
        if (!result.Success)
        {
            message = result.Message;
        }
        else
        {
            product = result.Data;
            if (product.Variants.Count > 0)
            {
                currentTypeId = product.Variants[0].ProductTypeId;
            }
        }
    }

    private ProductVariant GetSelectedVariant()
    {
        var variant = product.Variants.FirstOrDefault(v => v.ProductTypeId == currentTypeId);
        return variant;
    }

    private async Task AddToCart()
    {
        var productVariant = GetSelectedVariant();
        var cartItem = new CartItem
        {
            ProductId = productVariant.ProductId,
            ProductTypeId = productVariant.ProductTypeId
        };

        await CartService.AddtoCart(cartItem);
    }

    public int spacing { get; set; } = 2;
}
