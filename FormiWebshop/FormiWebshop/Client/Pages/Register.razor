@page "/register"
@inject IAuthService AuthService
@inject IStringLocalizer<App> Localizer

<PageTitle>@Localizer[nameof(ResourceStrings.Register)]</PageTitle>

<h3>@Localizer[nameof(ResourceStrings.Register)]</h3>

<EditForm Model="user" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="mb-3">
        <label for="email">@Localizer[nameof(ResourceStrings.Email)]</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control"></InputText>
        <ValidationMessage For="@(() => user.Email)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label for="password">@Localizer[nameof(ResourceStrings.Password)]</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password"></InputText>
        <ValidationMessage For="@(() => user.Password)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label for="confirmPassword">@Localizer[nameof(ResourceStrings.ConfirmPassword)]</label>
        <InputText id="confirmPassword" @bind-Value="user.ConfirmPassword" class="form-control" type="password"></InputText>
        <ValidationMessage For="@(() => user.ConfirmPassword)"></ValidationMessage>
    </div>
    <button type="submit" class="btn btn-primary">@Localizer[nameof(ResourceStrings.Register)]</button>
    <div class="@messageCssClass">
        <span>@message</span>
    </div>
</EditForm>

@code {
    UserRegister user = new UserRegister();

    string message = string.Empty;
    string messageCssClass = string.Empty;

    async Task HandleRegistration()
    {
        var result = await AuthService.Register(user);
        message = result.Message;

        if (result.Success)
        {
            messageCssClass = "text-success";
        }
        else
        {
            messageCssClass = "text-danger";
        }
    }
}
