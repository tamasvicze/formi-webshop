@page "/admin/product"
@page "/admin/product/{id:int}"
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@inject IProductService ProductService
@inject IProductTypeService ProductTypeService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<App> Localizer
@inject IJSRuntime JSRuntime

@if (loading)
{
    <span>@msg</span>
}
else
{
    @if (product.Editing)
    {
        <h3>Edit "@product.Title"</h3>
    }
    else if (product.IsNew)
    {
        <h3>@Localizer[nameof(ResourceStrings.CreateANewProduct)]</h3>
    }

    <EditForm Model="product" OnValidSubmit="AddOrUpdateProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="mb-0">
            <label for="title">@Localizer[nameof(ResourceStrings.Title)]</label>
            <InputText id="title" @bind-Value="product.Title" class="form-control"></InputText>
        </div>
        <div class="mb-0">
            <label for="imageUrl">@Localizer[nameof(ResourceStrings.ImageUrl)]</label>
            <InputText id="imageUrl" @bind-Value="product.ImageUrl" class="form-control"></InputText>
        </div>
        <div class="mb-0" style="display: flex; flex-wrap: wrap; flex-direction: row; justify-content: center;">
            @if (!string.IsNullOrEmpty(product.ImageUrl))
            {
                <img src="@product.ImageUrl">
            }
            else
            {
                foreach (var image in product.Images)
                {
                    @* <img src="@image.Data">
                    <button type="button" @onclick="(() => RemoveImage(image.Id))">@Localizer[nameof(ResourceStrings.Remove)]</button> *@

                    <MudCard Class="ma-2">
                        <MudCardContent>
                            <MudImage Src="@image.Data"></MudImage>
                        </MudCardContent>
                        <MudCardActions Style="justify-content: center;">
                            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => RemoveImage(image.Id))">@Localizer[nameof(ResourceStrings.Remove)]</MudButton>
                        </MudCardActions>
                    </MudCard>
                }
            }
        </div>
        <div class="mb-0">
            <label for="images">@Localizer[nameof(ResourceStrings.Images)]</label>
            <InputFile id="images" OnChange="OnFileChange" multiple class="form-control"></InputFile>
        </div>
        <div class="mb-0">
            <label for="description">@Localizer[nameof(ResourceStrings.Description)]</label>
            <InputTextArea id="description" @bind-Value="product.Description" class="form-control"></InputTextArea>
        </div>
        <hr />
        <div class="header">
            <div class="col">@Localizer[nameof(ResourceStrings.ProductType)] / @Localizer[nameof(ResourceStrings.Variant)]</div>
            <div class="col">@Localizer[nameof(ResourceStrings.Price)]</div>
            <div class="col">@Localizer[nameof(ResourceStrings.OriginalPrice)]</div>
            <div class="col">@Localizer[nameof(ResourceStrings.Visible)]</div>
            <div class="col"></div>
        </div>
        @foreach (var variant in product.Variants)
        {
            <div class="row">
                <div class="col">
                    <InputSelect disabled="@variant.Deleted" @bind-Value="variant.ProductTypeId" class="form-control">
                        @foreach (var productType in ProductTypeService.ProductTypes)
                        {
                            <option value="@productType.Id.ToString()">@productType.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col">
                    <InputNumber @bind-Value="variant.Price" class="form-control" disabled="@variant.Deleted"></InputNumber>
                </div>
                <div class="col">
                    <InputNumber @bind-Value="variant.OriginalPrice" class="form-control" disabled="@variant.Deleted"></InputNumber>
                </div>
                <div class="col col-visible">
                    <InputCheckbox @bind-Value="variant.Visible" style="transform:scale(1.5,1.5);" disabled="@variant.Deleted"></InputCheckbox>
                </div>
                <div class="col">
                    <button type="button" class="btn btn-primary" disabled="@variant.Deleted" @onclick="@(() => RemoveVariant(variant.ProductTypeId))">
                        <i class="oi oi-trash"></i>
                    </button>
                </div>
            </div>
        }
        <button type="button" class="btn btn-primary" @onclick="AddVariant">
            <i class="oi oi-plus"></i> @Localizer[nameof(ResourceStrings.AddVariant)]
        </button>
        <hr />
        <div class="mb-0">
            <label for="category">@Localizer[nameof(ResourceStrings.Category)]</label>
            <InputSelect id="category" @bind-Value="product.CategoryId" class="form-control">
                @foreach (var category in CategoryService.AdminCategories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
        </div>
        <hr />
        <div class="form-check">
            <InputCheckbox id="featured" @bind-Value="product.Featured" class="form-check-input"></InputCheckbox>
            <label for="featured" class="form-check-label">@Localizer[nameof(ResourceStrings.Featured)]</label>
        </div>
        <div class="form-check">
            <InputCheckbox id="visible" @bind-Value="product.Visible" class="form-check-input"></InputCheckbox>
            <label for="visible" class="form-check-label">@Localizer[nameof(ResourceStrings.Visible)]</label>
        </div>
        <hr />
        <button type="submit" class="btn btn-primary float-end">@btnText</button>
        <ValidationSummary></ValidationSummary>
    </EditForm>
    @if (!product.IsNew)
    {
        <button type="button" class="btn btn-danger float-start" @onclick="DeleteProduct">
            @Localizer[nameof(ResourceStrings.DeleteProduct)]
        </button>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }

    Product product = new Product();
    bool loading = true;
    string btnText = "";
    string msg = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        await ProductTypeService.GetProductTypes();
        await CategoryService.GetAdminCategories();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            product = new Product { IsNew = true };
            btnText = @Localizer[nameof(ResourceStrings.CreateProduct)];
        }
        else
        {
            Product dbProduct = (await ProductService.GetProduct(Id)).Data;
            if (dbProduct == null)
            {
                msg = $"Product with Id '{Id}' does not exist!";
                return;
            }
            product = dbProduct;
            product.Editing = true;
            btnText = @Localizer[nameof(ResourceStrings.UpdateProduct)];
        }
        loading = false;
    }

    void RemoveVariant(int productTypeId)
    {
        var variant = product.Variants.Find(v => v.ProductTypeId == productTypeId);
        if (variant == null)
        {
            return;
        }
        if (variant.IsNew)
        {
            product.Variants.Remove(variant);
        }
        else
        {
            variant.Deleted = true;
        }
    }

    void AddVariant()
    {
        product.Variants.Add(new ProductVariant { IsNew = true, ProductId = product.Id });
    }

    async void AddOrUpdateProduct()
    {
        if (product.IsNew)
        {
            var result = await ProductService.CreateProduct(product);
            NavigationManager.NavigateTo($"admin/product/{result.Id}");
        }
        else
        {
            product.IsNew = false;
            product = await ProductService.UpdateProduct(product);
            NavigationManager.NavigateTo($"admin/product/{product.Id}", true);
        }
    }

    async void DeleteProduct()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"Do you really want to delete '{product.Title}'?");
        if (confirmed)
        {
            await ProductService.DeleteProduct(product);
            NavigationManager.NavigateTo("admin/products");
        }
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        foreach (var image in e.GetMultipleFiles(10))
        {
            var resizedImage = await image.RequestImageFileAsync(format, 200, 200);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            product.Images.Add(new Image{ Data = imageData});
        }
    }

    void RemoveImage(int id)
    {
        var image = product.Images.FirstOrDefault(i => i.Id == id);
        if (image != null)
        {
            product.Images.Remove(image);
        }
    }
}