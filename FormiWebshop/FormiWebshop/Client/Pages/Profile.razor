@page "/profile"
@using Microsoft.AspNetCore.Authorization
@inject IAuthService AuthService
@inject IStringLocalizer<App> Localizer
@attribute [Authorize]

<MudGrid Justify="Justify.Center">
    <MudItem xs="10">
        <AuthorizeView>
            <h3>@Localizer[nameof(ResourceStrings.LoggedInWithEmail)] @context.User.Identity.Name</h3>
        </AuthorizeView>

        <h5>@Localizer[nameof(ResourceStrings.DeliveryAddress)]</h5>
        <AddressForm />
        <p></p>

        <h5>@Localizer[nameof(ResourceStrings.ChangePassword)]</h5>

        <EditForm Model="request" OnValidSubmit="ChangePassword">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="mb-3">
                <label for="password">@Localizer[nameof(ResourceStrings.NewPassword)]</label>
                <InputText id="password" @bind-Value="request.Password" class="form-control" type="password" />
                <ValidationMessage For="@(() => request.Password)" />
            </div>
            <div class="mb-3">
                <label for="confirmPassword">@Localizer[nameof(ResourceStrings.ConfirmNewPassword)]</label>
                <InputText id="confirmPassword" @bind-Value="request.ConfirmPassword" class="form-control" type="password" />
                <ValidationMessage For="@(() => request.ConfirmPassword)" />
            </div>
            <button type="submit" class="btn btn-primary">@Localizer[nameof(ResourceStrings.Save)]</button>
        </EditForm>
        @message
    </MudItem>
</MudGrid>

@code {
    UserChangePassword request = new UserChangePassword();
    string message = string.Empty;

    private async Task ChangePassword()
    {
        var result = await AuthService.ChangePassword(request);
        message = result.Message;
    }
}
