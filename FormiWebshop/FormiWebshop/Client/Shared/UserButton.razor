@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ICartService CartService
@inject IStringLocalizer<App> Localizer

<div class="dropdown">
    <MudIconButton Variant="Variant.Text" OnClick="@(() => OpenDrawer(Anchor.Right))"Icon="@Icons.Material.Filled.AccountBox" Color="Color.Inherit" @onfocusout="HideUserMenu"></MudIconButton>
    <MudDrawer @bind-Open="@open" Anchor="@anchor" Elevation="1" Variant="@DrawerVariant.Temporary">
    <MudDrawerHeader>
            <MudText Typo="Typo.h6">@Localizer[nameof(ResourceStrings.FormiWebshop)]</MudText>
    </MudDrawerHeader>
    <MudNavMenu>
        <AuthorizeView>
            <Authorized>
                <MudNavLink Href="profile">@Localizer[nameof(ResourceStrings.Profile)]</MudNavLink>
                <MudNavLink Href="orders">@Localizer[nameof(ResourceStrings.Orders)]</MudNavLink>
                <MudDivider Class="my-2"/>
                <AdminMenu/>
                <MudButton Variant="Variant.Text" @onclick="Logout">@Localizer[nameof(ResourceStrings.Logout)]</MudButton>
            </Authorized>
            <NotAuthorized>
                <MudNavLink><a href="login?returnUrl=@NavigationManager.ToBaseRelativePath(NavigationManager.Uri)">@Localizer[nameof(ResourceStrings.Login)]</a></MudNavLink>
                <MudNavLink Href="register">@Localizer[nameof(ResourceStrings.Register)]</MudNavLink>
            </NotAuthorized>
        </AuthorizeView>
    </MudNavMenu>
        </MudDrawer>
    </div>

@code {
    private bool showUserMenu = false;

    private string UserMenuCssClass => showUserMenu ? "show-menu" : null;

    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }

    private async Task HideUserMenu()
    {
        await Task.Delay(200);
        showUserMenu = false;
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        await CartService.GetCartItemsCount();
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("");
    }

    bool open;
    Anchor anchor;

    void OpenDrawer(Anchor anchor)
    {
        open = true;
        this.anchor = anchor;
    }
}