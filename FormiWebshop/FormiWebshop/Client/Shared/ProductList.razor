@inject IProductService ProductService
@inject IStringLocalizer<App> Localizer
@implements IDisposable

<MudGrid>
    @if (ProductService.Products == null || ProductService.Products.Count == 0)
    {
        <MudText Class="d-flex align-center justify-center mud-width-full" Typo="Typo.h6">@ProductService.Message</MudText>
    }
    else
    {
        <MudItem xs="12">
            <MudList Class="d-flex align-center justify-center mud-width-full">
                @foreach (var product in ProductService.Products)
                {
                    <MudListItem>
                        <MudContainer MaxWidth="MaxWidth.Small">
                            <MudLink Href=@($"product/{product.Id}")>
                                <MudLink Href=@($"product/{product.Id}")>
                                    @if (!string.IsNullOrEmpty(product.ImageUrl))
                                    {
                                        <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
                                        @* <MudImage Src="@product.ImageUrl" Alt="@product.Title"></MudImage> *@
                                    }
                                    else if (product.Images.Count > 0)
                                    {
                                        <img class="media-img" src="@product.Images[0].Data" alt="@product.Title" />
                                       @*  <MudImage Src="@product.Images[0].Data" Alt="@product.Title"></MudImage> *@
                                    }
                                </MudLink>
                            </MudLink>
                        </MudContainer>
                        <MudContainer MaxWidth="MaxWidth.Small">
                            <MudLink Href=@($"product/{product.Id}")>
                                <MudText Typo="Typo.h5">@product.Title</MudText>
                            </MudLink>
                            <MudText Typo="Typo.h6">@* @product.Description *@</MudText>
                            <MudText Typo="Typo.h6" Class="green-text text-accent-4">@GetPriceText(product)</MudText>
                        </MudContainer>
                    </MudListItem>
                }
            </MudList>
        </MudItem>

        for (var i = 1; i <= ProductService.PageCount; i++)
        {
            <a class="btn
           @(i == ProductService.CurrentPage ? "btn-info" : "btn-outline-info")
           page-selection"
               href="/search/@ProductService.LastSearchText/@i">@i</a>
        }
    }
</MudGrid>

@code {
    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;

        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"{variants[0].Price} {Localizer[nameof(ResourceStrings.Currency)]}";
        }

        decimal minPrice = variants.Min(v => v.Price);
        return $"{Localizer[nameof(ResourceStrings.StartingAt)]} {minPrice} {Localizer[nameof(ResourceStrings.Currency)]}";
    }
}
